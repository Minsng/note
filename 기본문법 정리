html 기본 문법.txt




<html 기본 문법>

-폴더/파일명 => 영문(대/소)+숫자+'_'+'-' (꼭 시작문자는 영문)   
                     ex)sample_1.html
-html/css/javascript 영문 대소문자를 구분한다
-html => 무조건 영문 소문자로 마크업한다
-대다수의 태그들은 <태그명></태그명>  => 태그의 계층(DOM-부모/자식 관계)
     -시작태그만 있는 경우(선언/명시/연결)
         -<meta>,
-태그들은 계층(부모/자식)을 표현할 수 있다
-모든 웹문서(파일명.html)는 하나의 <html></html> => 최상위 부모
       - <html lang="주언어명시">
       - 한국어는 <html lang="ko">
         영어는 <html lang="en">
         독일어는 <html lang="de">
         일어는 <html lang="ja">
         중국어는 <html lang="zh">
         프랑스어는 <span lang="fr">
-<head></head>  => 화면에 보여지는 부분 이외의 것을 명시(코드명시/선언/css 또는 js 파일을 연결) 
    -<title>사이트제목</title>
    -<meta> => 본문에 코드를 처리하기 전에 미리 브라우저에게 특정의 정보를 알려주는 역할
           -<meta charset="UTF-8">  => 컨텐츠 타입 선언 한다.
           - UTF-8(유니코드) => (한글/이진언어)통일
-<body></body>  => 웹페이지의 본문을 처리하는 태그(화면 UI 구현)
-html 엔티티(스페이스(공백문자->' ')/엔터값/특수문자)
       -공백문자(&nbsp;)
       -엔터(<br>)
       -<(&lt;) , >(&gt;)
       -&(&amp;)
       -카피라이트(&copy)
       -https://unicode-table.com/kr/html-entities/
-html의 기본 속성
       -글꼴크기(font-size) -> 16px
       -글꼴(font-family) -> 굴림
       -색상(color) -> black / #000
-주석=> 실제로 처리/계산 되지 않는 코드/설명글
      -html 주석 ->   <!-- 주석문 -->
      -css 주석 -> /* 주석문 */


-템플릿
  - html문서에서 꼭 필수적으로 필요한 코드
  - html4.01 / xhtml1.0 / html5(현재)
  - html5 템플릿 문서  =>  html:5 (tab)  / !  (tab)
  
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>
    
</body>
</html>

-<!DOCTYPE>  => html의 세가지 버전을 브라우저에게 명시/알려주는 역할/코드를 렌더링(계산)
    -html4.01
       <!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01 
        Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/html4-transitional.dtd">
    -xhtml1.0
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 
        Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    -html5
        <!DOCTYPE html>
-----------------------------------------------------------------------
1. 다양한 태그들의 특징/활용

-<h1>~<h6> 헤딩태그(요소)=> 제목/타이틀/헤드라인
    - 웹접근성(표준) 가장 중요한 요소
    - 목차(outline)를 표현할 수 있는 수단을 제공***
    - <h1> => 사이트로고, 한 페이당 1개만 사용한다
    - <h1>~<h6> => 중간 계층을 생략할 수 없다.
    - 스크린 리더기가 실제로 해당 태그를 읽어준다(헤딩1~헤딩2)
    - default css속성
         -font-size / 상하정렬 / 상하마진 / width(부모태그의 100%) / bold(굵게) /display:block
    - 상속시(css) -> font-size는 영향을 받지않는다

-<p> 단락(콘텐츠/내용 글)
    - 상하여백(margin)을 가지고있다.
    - 정렬방식: 상하정렬/수직정렬 (display:block)
    - width(폭) : 부모태그의 100%

-<div> 빈박스/상자-> 콘텐츠를 구분할때 사용/묶을때 사용
   - 레이아웃을 잡는 요소
   - default css속성
         -상하/수직정렬,width(부모태그의 100%) /display:block
   - <div> 태그는 모든 다른 요소(태그)를 자식요소로 갖을 수 있다
   - <div>는 중첩해서 사용할 수  있다

-<span>,<strong>,<em>
   - 문단/문장/단락/제목/글 에 특정 단어 등에 강조/표현/스타일 
   - default css속성
         -좌우/수평정렬/,width(내용/콘텐츠의 길이,양)
   - <span> -> 기본 css가 적용되어 있지 않다
                 -> 제작자/개발자의 주관적인 UI 표현
   - <strong> -> font-weight:bold (굵게) -> 강한강조
   - <em>   -> font-style: italic (기울임) -> 약한강조
  
-<a>
   -하이퍼링크 -> (태그중에서 가장 중요한 태그 1위)
   -inline 요소
   -default css속성
       -color:blue / cursor: pointer / text-decoration: underline
   -리더기가 읽어준다 (~~~링크)
   -태그의 속성
       -href="페이지주소"  (링크)  / 생략하면 error
       -title="링크설명글" (스크린리더기가 읽어준다-접근성)
       -target="_self(기본)/_blank(새창/새탭)"  ,
                   -target="_blank"=>제휴/family/타사이트  / title="???사이트가 새창에 열림"  (_blank 이면 꼭!! title속성을 함께 사용한다)
                 ex)<a href="http://naver.com" title="네이버로이동합니다" target="_blank">네이버로이동</a> 
   - 상속시(css) ->text-decoration/color는 영향을 받지않는다
   - focus를 받을 수 있는 요소
   - 가상클래스를 가지고 있다
      link:       => 최초 페이지가 열렸을때 상황(기본)
      visited:    => 사용자가 과거에 링크를 선택한 적이 있을때 
      hover:      => 현재 마우스 포인터 등으로 가리켜지고 있을때(롤오버) => 모든 태그가 사용 가능하다
      active:     => 현재 클릭되고 있을때
      focus:     => 포커스를 받을때
     ex).link a:hover{text-decoration: underline; color: orange;}
   - 다운로드 => 브라우저가 처리할 수 없는 파일의 종류를 href="" 로 연결할때
      -강제로 모든 파일을 다운로드 
       ex)<a href="./images/a1.jpg" download="./a1.jpg">이미지파일 다운로드</a> 
   -점프메뉴 
       -<태그 id="아이디명">
       -<a href="#아이디명">해당콘텐츠로이동</a>   (<a href="top">상단으로이동</a>)

-<ul>/<li>
   -순서없는 목록 (unorder list) - 블릿
   -<ul>/<li> => 블럭요소
   -<ul>의 직계 자식은 꼭!!! <li>만 올수 있다
   -<li>는 div를 포함한 블럭요소를 자식으로 사용할 수 있다
   -ul/li에서만 사용할 수 있는 속성
        -list-style:disk(기본)/square/circle/none(제거)
        -list-style-type:disk(기본)/square/circle/none(제거)
        -list-style-position:outside(기본값)/inside   -> 블릿의 위치
        -list-style-image:url(./images/icon.jpg)  -> 블릿을 이미지로..
    -리스트/네비게이션(메뉴)/겔러리/....어떤 ui콘텐츠가 2개 이상 반복될때..
    -<ul>은 중첩이 가능하다 / <ol>과의 중첩도 가능 / <ul>자손으로 <dl>을 선언할 수 있다
       ex)
     <ul>
        <li>1depth 01
            <ul>
              <li>2depth 01
                  <ul>
                    <li>3depth 01</li>
                    <li>3depth 02</li>
                  </ul>
              </li>
              <li>2depth 02</li>
              <li>2depth 03</li>
            </ul>
        </li>
        <li>1depth 02
          <ul>
            <li>2depth 01</li>
            <li>2depth 02</li>
            <li>2depth 03</li>
          </ul>
        </li>
        <li>1depth 03</li>
        <li>1depth 04</li>
    </ul>
   
-<ol>/<li>
   -순서있는 목록 (order list) -순서
   -<ol>/<li> => 블럭요소
   -<ol>의 직계 자식은 꼭!!! <li>만 올수 있다
   -<li>는 div를 포함한 블럭요소를 자식으로 사용할 수 있다
   -list-style: decimal/lower-alpha/upper-alpha/none;
   -순서/과정/프로세스가 꼭 필요한 경우 사용~~
   -<ol>은 중첩이 가능하다 / <ul>과의 중첩도 가능
      <ol>
          <li>도큐먼트 타입을 선언한다.
             <ol>
                <li>2depth 01
                   <ol>
                      <li>3depth 01</li>
                      <li>3depth 02</li>
                   </ol>
                </li>
                <li>2depth 02</li>
                <li>2depth 03</li>
             </ol>
          </li>
          <li>네임 스페이스를 선언한다.</li>
          <li>컨텐츠 타입을 선언한다.</li>
          <li>모든 태그는 계층에 맞게 싸고 있다.</li>
      </ol>

-<dl><dt><dd>
   -정의형 목록
   -접근성을 향상시킬 수 있다
   -모두 블럭요소
   -<dl>의 직계자식은 <dt><dd>만 올 수 있다 
   -<dl>의 직계자식으로 최소한 <dt><dd>가 1개씩은 구성 되어야 한다
   -<dt>=>리스트의 제목/outline에 등록되지 않는다
   -<dd>=>바로 이전에 선언된 <dt>태그의 리스트로 귀속된다
   -하나의 <dt>에 여러개의 <dd>선언이 가능
   -<dl>는 중첩하지 않는다 / <dl>의 자손으로 <ul>/<ol> 을 중첩하지 않는다
   -<dt><dd>의 자식으로 인라인 요소만 올 수 있다

-<blockquote> / <q>
   -인용문에 사용하는 요소
   -<blockquote>  => 블럭요소
   -<q> => 인라인요소
   -공통 태그의 속성
      -cite="인용한 사이트의 출처/url"
      -title="리더기가 읽을 인용문에 대한 상세설명"

-<abbr>,<acronym>
   -축약어/두문자어
   -인라인요소
   -공통속성
        -title="Distributed Denial of Service" 

-<del>,<ins>
    -<del> -> 삭제글
    -<ins> -> 추가글
    -인라인요소

-<sup>,<sub>
    -윗첨자/아랫첨자
    -인라인요소   

-<address>
   -주소,전화번호,팩스번호,이메일,sns주소.... => 피드백을 요하는 데이터
   -블럭요소
   -기본css -> font-style: italic;

-<img>
   -이미지를 처리하는 태그
   -인라인요소
   -시작태그만 갖고있다
   -태그의 속성
        -src="이미지의 경로/파일명.확장자"
        -alt="텍스트정보/링크정보"  (웹접근성 기본) => 생략하면 error
   -인라인 요소지만 블럭모델(width/height/margin)을 display:block 없이 사용할 수 있다
----------------------------------------------------------------------
2. css 스타일링 연결 방식

*css 스타일링 3가지 방식
 선택자{속성:값;
           속성:값;
 }

*우선 순위(해당 css 속성이 중복/충돌할때)
  -상속 < 자신 
  -인라인 > 임베디드 > 링크드

1)태그에 직접 쓰는 방법(인라인 스타일,로컬 스타일)
   <p style="color:red; font-size:50px; font-weight: bold;">

2)HTML 문서에 스타일을 포함하는 방법(임베디드 스타일,페이지 스타일)
    <head></head> 태그 사이에 코딩
   <style>
       h1{font-size: 16px;}
       p{color:red;}
   </style>

3)분리되어 있는 css파일을 링크하는 방법(링크드 스타일)=>가장 적합한 방법(코드의 재사용)***
   -독립적인 css파일을 생성한다
    <ex.css>
      h1{font-size: 16px;}
      p{color:red;}

    <ex.html>
    <link rel="stylesheet" href="ex.css">
---------------------------------------------------------------------
3. 태그의 분류!!! 

 1)inline-level Element(인라인요소)
       -<a>,<span>,<strong>,<em>,<q>,<abbr>,<acronym>,<del>,<ins>,<sup>,<sub>,<img>
       -정렬방식=>수평정렬/좌우정렬
       -width(너비) => 콘텐츠 요소의 길이/양
       -inline요소는 Block요소의 자식 계층으로만 사용할 수 있다
         -inline요소 끼리는 부모/자식 관계가 성립한다 ( 예외 -> )
       -width/height/margin/padding => 지원하지 않는다 
           -강제로 인라인 요소를 블럭요소로 바꾸는 방법/속성 => display:block;
           -정렬방식(수직정렬)과 기본너비(100%)의 특성도 함께 바뀐다

 2)Block-level Element(블럭요소)
       -<h1>~<h6>,<p>,<div>,<ul><ol>/<li>,<dl><dt><dd>,<blockquote>,<address>
       -정렬방식=> 수직정렬/상하정렬
       -width(너비)=>부모태그의 100%
       -Block요소는 inline요소의 부모 계층으로만.. 사용할 수 있다
          -inline요소 끼리는 부모/자식 관계 모두 다르게 성립한다
       -width/height/margin/padding => 블럭요소의 주요속성
---------------------------------------------------------------------
4. 상속(css)
  -표준화된 계층
  -부모요소에 css를 적용하면 자손요소에 css속성 값이 물려지게 된다
  -우선순위
    상속(css) < 해당요소(css)
--------------------------------------------------------------------
5.class 와 id 
 -요소의 네이밍 기법 => 의미있는 네이밍
 -클래스/아이디명 => 영문(대/소),숫자,_,- (첫글자는 영문시작)
 -두단어 이상(권장)
     -언더스코어표기법/스네이크표기법 => notice_tit  /  submit_btn
     -카멜표기법 => noticeTit  /  submitBtn
     -파스칼 표기법 => NoticeTit  /  SubmitBtn
 -하나의 태그에 class와 id를 함께 사용할 수 있다

 1)class
    -<태그 class="클래스명">
    -css 타겟팅/선택자    =>   .클래스명{속성:값;속성:값;속성:값;}
    -각각의 요소/그룹을 타겟팅 할 수 있다
    -여러 태그(태그의 종류가 달라도 무관)에 동일한 클래스명을 줄 수 있다(그룹)
    -하나의 태그에 여러개의(2개~) 클래스명을 부여할 수 있다(다중클래스)
           ->  <태그 class="클래스명1 클래스명2 클래스명2 ....">
    -태그의 타겟팅(선택자) 역할만 사용

 2)id
    -<태그 id="아이디명">
    -css 타겟팅/선택자    =>   #아이디명{속성:값;속성:값;속성:값;}
    -각각의 요소만 타겟팅 할 수 있다(한 html페이지에 아이디는 only 1개만 존재)
    -하나의 태그에 하나의 id만 존재한다
    -태그의 타겟팅(선택자) 역할 + 또 다른 중요한 역할 수행(점프메뉴 목적지 역할)


 *우선순위(css)
   -css 코드의 하단에 위치한 중복된 속성이 우선순위가 높다
   -태그명 < class명 < id명

-----------------------------------------------------
6.다양한 타겟팅(선택자) 방법

1)부모/조상 태그를 함께 호출하여 타겟팅 하는 방법
     -우선순위를 조율할 수 있다 => 중간 단계의 계층은 생략 가능하다 (space->자손)
     -css의 가독성(읽히는 능률의 정도) / css 코드 분석 용이/ 팀 작업 용이
     -class 와 id를 최소화 할 수 있다

2)열거형 타겟팅(선택자 그룹)
    -태그의 종류/id/class는 다르고, css속성과 값이 동일할때 ',' 를 사용한다
     ex)h1,p,.p1,#p2{속성:값}

3)다양한 결합자(부호/기호)를 사용하는 방법
   -직계 자식요소 결합자  (>) 
   -인접 형제 요소 결합자 (뒤에오는 형제 중 첫번째) (+)
   -형제 요소 결합자 (뒤에오는 형제 모두) (~)
   -모든태그(html/body포함) (*)
   -태그의 속성을 사용한 결합자  
      ex) .link a[title]{color: red;} 
           .link a[title="네이버"]{color: green;} 
           .link a[href^="https://daum"]{color: pink;}   (^=  font)
           .link a[href$=".com/"]{color: orange;}   ($=  end)
---------------------------------------------------------------
<웹의 color>
-css 속성 =>  color,  background-color/background, border-color/border 
-빛의3원색 => RGB컬러
-red(0~255)   /   green(0~255)   /blue(0~255)
-3가지 방법
       -color: red/blue/green (색값)
       -color: rgb(0~255,0~255,0~255)  (rgb함수)
       -color: #000000  (16진수 색상값)
                #000 (웹안전컬러) 
-진수(숫자를 표현하는 가지수)
  -2진수 -> 0~1
  -8진수 -> 0~7
  -10진수 -> 0~9
  -16진수 -> 0~9~a(10)~f(15) 

-------------------------------------------------------------
<css 단위>

  1)절대단위: in(1인치는 2.54cm)  cm  mm  pt  pc(1파이카는 12포인트 ) ex px(권장/강요/협박)
  2)상대단위: em  %

  *사이즈 기본 =>  12pt =  16px = 1em = 100%
   -em => body에 선언된 font-size:??px 를 기준 크기로 하여 em단위를 재 계산/환산하는 상대 단위
              -http://pxtoem.com/
-----------------------------------------------------------------
<박스모델 css속성 (margin / padding)>
 -모든 태그의 여백 초기화  =>  *{margin: 0; padding: 0;}

 1)margin => 위/오른쪽/아래/왼쪽의 박스 바깥 여백
         -margin-top: 30px;
         -margin-right: 50px;
         -margin-bottom: 30px;
         -margin-left: 50px;
         -margin:30px 50px 40px 20px; (위/오른쪽/아래/왼쪽)
         -margin:30px 50px 40px 0; (위/오른쪽/아래/왼쪽=0)
         -margin:30px 50px 40px; (위/오른쪽/아래/왼쪽=50px)
         -margin:30px 50px;  (위/오른쪽/아래=30px/왼쪽=50px)
         -margin:30px;  (위/오른쪽/아래/왼쪽) 모두 30px

     *더블마진 상하병합 => margin-bottom / margin-top => 큰값 하나만 처리
     *더블마진 좌우합산 => margin-right / margin-left => 두 여백이 모두 합산

 2)padding => 위/오른쪽/아래/왼쪽의 박스 안쪽 여백
      -마진과 안쪽 여백 주는 방법은 동일

  ***padding + width + border => 모두 합산된다
--------------------------------------------------------------------
<이미지 처리방법>

1)<img>태그를 사용하는 방법
   -태그의 속성
        -src="이미지의 경로/파일명.확장자"
        -alt="텍스트정보/링크정보"  (웹접근성 기본) => 생략하면 error
2)css=> background-image:url() / background:url() 속성을 사용하는 방법 (배경)
        -배경이미지는 padding의 영향을 안받는다
        -background-image: url(./images/center.jpg);  (이미지경로)
        -background-repeat:no-repeat;  (반복형태)
        -background-position: 50px 100px/50% 50%;  (left/right/center/top/bottom)
        -background-attachment: fixed; (스크롤에 배경이미지 고정)

        -background: url(./images/center.jpg) right bottom no-repeat;
        -background: #f00 url(./images/center.jpg) right bottom no-repeat;
----------------------------------------------------------------
<레이아웃>
-block요소들은 기본 정렬방식이 수직/상하 정렬 방식을 취하고 있다
 이 블럭요소들의 정렬을 강제로 수평/좌우 정렬로 바꿀 수 있다
-강제단 만드는 방법 
   1)float:left/right 
        -문제점 -> float을 사용한 요소의 직계 부모요소(부모요소가 자식요소를 감싸지 못하는 문제)
                   -> 해결방법 
                         1. 부모태그에 overflow:hidden (최선책)
                         2. 부모태그에 float:left (차선책)
        -float을사용하는/강제 단을 적용해야하는 요소에 width값(px/%)이 있으면
                 -> 좌측단과 우측단에 위치하는 모든 요소(둘다~~)에 float을 적용한다  

   2)clear:both
        -강제단의 공간을 사용하지 않는다(공간 해제/취소)

   3)<div>/블럭요소를 추가한다
       -무조건 1:1(1:1 / 다:1 / 1:다 / 다:다)을 만들어라~~~
---------------------------------------------------------------
<overflow css속성>

-박스에서 콘텐츠의 양이 많아 박스의 크기를 벗어나는(넘치는) 경우 처리하는 속성
-overflow:hidden  (잘라낸다)
-overflow:scroll (가로/세로 스크롤을 생성한다)
-overflow:auto/overflow-y:scroll  (가로스크롤만 생성한다)
-----------------------------------------
<position 속성(css)>

- static(기본값) / absolute(절대주소/스크롤 유) 
  / fixed(고정주소/스크롤 무) / relative(상대주소)
-static(다른 포지션 속성값을 해제하는 역할) 
-position과 함께 사용되는 속성(position이 적용되어 있어야 사용할 수 있는 속성)
     -lefe/top/right/bottom => 실제 위치를 이동 시키는 속성 (px/%)
     -z-index속성  => 깊이값을 마음대로 조율 할 수 있다
-원점의 위치 변경
    -기본 left:0;  top:0
    -lefe/top/right/bottom  (기준점을 4군데로 사용가능)
-깊이값(depth)
     -position이 적용된 ...코드 순서상 아래에 위치한 요소가 위로 올라간다
    -z-index:1~100  => 값이 크면 위로 올라간다

-포지션 속성값 비교

                            원점의위치(0,0)      태그의크기(공간)/위치보존     깊이(z-index)     스크롤링의영향   
                        --------------------------------------------------------------------------------------------------
    -relative         원래태그상의시작점          보존된다                           증가(위)한다         받는다
   -absolute        body 0 0                               보존안된다                        증가(위)한다         받는다
   -fixed                body 0 0                               보존안된다                        증가(위)한다          고정된다
       ------------------------------------------------------------------------------------------------------------

  










